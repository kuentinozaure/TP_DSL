/**
 * generated by Xtext 2.14.0
 */
package com.m1ice.fsm.dsl.generator;

import com.m1ice.fsm.FSM;
import com.m1ice.fsm.Transition;
import java.util.HashMap;
import java.util.Set;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    FSM myFsm = ((FSM) _get);
    HashMap<String, String> sourceToTarget = this.getSrcToTarget(myFsm);
    String _name = myFsm.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.genrateMainClass(myFsm, sourceToTarget));
  }
  
  private HashMap<String, String> getSrcToTarget(final FSM fsm) {
    final HashMap<String, String> result = new HashMap<String, String>();
    final Consumer<Transition> _function = (Transition t) -> {
      result.put(t.getStateStart().getName(), t.getStateEnd().getName());
    };
    fsm.getTransition().forEach(_function);
    return result;
  }
  
  private String genrateMainClass(final FSM fsm, final HashMap<String, String> sourceToTarget) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = fsm.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("static String name = \"");
    String _name_1 = fsm.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("static String initState = \"");
    String _name_2 = fsm.getState().get(0).getName();
    _builder.append(_name_2, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("static String currentState = initState\t;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String [] args){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(true){\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch (currentState){");
    _builder.newLine();
    {
      Set<String> _keySet = sourceToTarget.keySet();
      for(final String k : _keySet) {
        _builder.append("\t\t\t");
        _builder.append("case \"");
        _builder.append(k, "\t\t\t");
        _builder.append("\" : ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("System.out.println(\"go from ");
        _builder.append(k, "\t\t\t\t");
        _builder.append(" to ");
        String _get = sourceToTarget.get(k);
        _builder.append(_get, "\t\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("currentState = \"");
        String _get_1 = sourceToTarget.get(k);
        _builder.append(_get_1, "\t\t\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
